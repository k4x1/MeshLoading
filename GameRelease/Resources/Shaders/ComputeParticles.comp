#version 430
layout(local_size_x = 128) in;

layout(std430, binding = 0) buffer PositionLifeBuffer {
    vec4 PositionLife[];
};

layout(std430, binding = 1) buffer VelocityBuffer {
    vec4 Velocity[];
};

uniform vec4 VelocityLifeChange;
uniform vec3 EmitterOrigin;
uniform int SeedLife;
uniform int SeedX;
uniform int SeedY;
uniform int SeedZ;

void ResetParticle(uint Index);
double RandomValue(uint ID, int Seed);


void ResetParticle(uint Index) {
    float LifeModifier = 5.0f;
    float Speed = 15.0f;

    PositionLife[Index] = vec4(
        EmitterOrigin.xyz, 
        (RandomValue(Index, SeedLife) + 1) * 0.5f * LifeModifier
    );

    // Generate a random direction vector
    vec3 randDir = vec3(
        RandomValue(Index, SeedX),
        RandomValue(Index, SeedY),
        RandomValue(Index, SeedZ)
    );

    // Ensure the random direction is not zero to avoid division by zero
    if (length(randDir) == 0.0) {
        randDir = vec3(0.0, 1.0, 0.0);
    } else {
        randDir = normalize(randDir); // Normalize to get a unit vector
    }

    // Set the velocity in the random direction scaled by the speed
    Velocity[Index] = vec4(randDir * Speed, 0.0f);
}

double RandomValue(uint ID, int Seed) {
    double RandomValue;
    int Noise = int(ID) * Seed;
    Noise = (Noise << 13) ^ Noise;
    int T = (Noise * (Noise * Noise * 15731 + 789221) + 1376312589) & 0x7fffffff;
    RandomValue = 1.0 - double(T) * 0.931322574615478515625e-9;
    return RandomValue;
}

void main() {
    uint Index = gl_GlobalInvocationID.x;

    Velocity[Index].xyz += VelocityLifeChange.xyz;
    PositionLife[Index].xyz += Velocity[Index].xyz * VelocityLifeChange.w;
    PositionLife[Index].w -= VelocityLifeChange.w;

    if (PositionLife[Index].w <= 0.0f) {
        ResetParticle(Index);
    }
}